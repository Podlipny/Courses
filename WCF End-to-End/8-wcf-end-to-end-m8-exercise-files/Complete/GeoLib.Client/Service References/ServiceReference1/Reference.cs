//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GeoLib.Client.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ZipCodeData", Namespace="http://www.pluralsight.com/MiguelCastro/WcfEndToEnd")]
    [System.SerializableAttribute()]
    public partial class ZipCodeData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ZipCodeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string City {
            get {
                return this.CityField;
            }
            set {
                if ((object.ReferenceEquals(this.CityField, value) != true)) {
                    this.CityField = value;
                    this.RaisePropertyChanged("City");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string State {
            get {
                return this.StateField;
            }
            set {
                if ((object.ReferenceEquals(this.StateField, value) != true)) {
                    this.StateField = value;
                    this.RaisePropertyChanged("State");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ZipCode {
            get {
                return this.ZipCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.ZipCodeField, value) != true)) {
                    this.ZipCodeField = value;
                    this.RaisePropertyChanged("ZipCode");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IGeoService")]
    public interface IGeoService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGeoService/GetZipInfo", ReplyAction="http://tempuri.org/IGeoService/GetZipInfoResponse")]
        GeoLib.Client.ServiceReference1.ZipCodeData GetZipInfo(string zip);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGeoService/GetZipInfo", ReplyAction="http://tempuri.org/IGeoService/GetZipInfoResponse")]
        System.Threading.Tasks.Task<GeoLib.Client.ServiceReference1.ZipCodeData> GetZipInfoAsync(string zip);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGeoService/GetStates", ReplyAction="http://tempuri.org/IGeoService/GetStatesResponse")]
        string[] GetStates(bool primaryOnly);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGeoService/GetStates", ReplyAction="http://tempuri.org/IGeoService/GetStatesResponse")]
        System.Threading.Tasks.Task<string[]> GetStatesAsync(bool primaryOnly);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGeoService/GetZipsByState", ReplyAction="http://tempuri.org/IGeoService/GetZipsByStateResponse")]
        GeoLib.Client.ServiceReference1.ZipCodeData[] GetZipsByState(string state);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGeoService/GetZipsByState", ReplyAction="http://tempuri.org/IGeoService/GetZipsByStateResponse")]
        System.Threading.Tasks.Task<GeoLib.Client.ServiceReference1.ZipCodeData[]> GetZipsByStateAsync(string state);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGeoService/GetZipsForRange", ReplyAction="http://tempuri.org/IGeoService/GetZipsForRangeResponse")]
        GeoLib.Client.ServiceReference1.ZipCodeData[] GetZipsForRange(string zip, int range);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGeoService/GetZipsForRange", ReplyAction="http://tempuri.org/IGeoService/GetZipsForRangeResponse")]
        System.Threading.Tasks.Task<GeoLib.Client.ServiceReference1.ZipCodeData[]> GetZipsForRangeAsync(string zip, int range);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IGeoServiceChannel : GeoLib.Client.ServiceReference1.IGeoService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GeoServiceClient : System.ServiceModel.ClientBase<GeoLib.Client.ServiceReference1.IGeoService>, GeoLib.Client.ServiceReference1.IGeoService {
        
        public GeoServiceClient() {
        }
        
        public GeoServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public GeoServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public GeoServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public GeoServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public GeoLib.Client.ServiceReference1.ZipCodeData GetZipInfo(string zip) {
            return base.Channel.GetZipInfo(zip);
        }
        
        public System.Threading.Tasks.Task<GeoLib.Client.ServiceReference1.ZipCodeData> GetZipInfoAsync(string zip) {
            return base.Channel.GetZipInfoAsync(zip);
        }
        
        public string[] GetStates(bool primaryOnly) {
            return base.Channel.GetStates(primaryOnly);
        }
        
        public System.Threading.Tasks.Task<string[]> GetStatesAsync(bool primaryOnly) {
            return base.Channel.GetStatesAsync(primaryOnly);
        }
        
        public GeoLib.Client.ServiceReference1.ZipCodeData[] GetZipsByState(string state) {
            return base.Channel.GetZipsByState(state);
        }
        
        public System.Threading.Tasks.Task<GeoLib.Client.ServiceReference1.ZipCodeData[]> GetZipsByStateAsync(string state) {
            return base.Channel.GetZipsByStateAsync(state);
        }
        
        public GeoLib.Client.ServiceReference1.ZipCodeData[] GetZipsForRange(string zip, int range) {
            return base.Channel.GetZipsForRange(zip, range);
        }
        
        public System.Threading.Tasks.Task<GeoLib.Client.ServiceReference1.ZipCodeData[]> GetZipsForRangeAsync(string zip, int range) {
            return base.Channel.GetZipsForRangeAsync(zip, range);
        }
    }
}
